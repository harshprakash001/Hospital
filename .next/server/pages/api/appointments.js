"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/appointments";
exports.ids = ["pages/api/appointments"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "mysql2/promise":
/*!*********************************!*\
  !*** external "mysql2/promise" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("mysql2/promise");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fappointments&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cappointments.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fappointments&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cappointments.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_appointments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\appointments.js */ \"(api)/./pages/api/appointments.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_appointments_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_appointments_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/appointments\",\n        pathname: \"/api/appointments\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_appointments_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFwcG9pbnRtZW50cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDYXBwb2ludG1lbnRzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzBEO0FBQzFEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx1REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsdURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9zcGl0YWwtbWFuYWdlbWVudC8/YmE4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGFwcG9pbnRtZW50cy5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FwcG9pbnRtZW50c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FwcG9pbnRtZW50c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fappointments&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cappointments.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/dbConnect.js":
/*!**************************!*\
  !*** ./lib/dbConnect.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dbConnect: () => (/* binding */ dbConnect)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"mysql2/promise\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mysql2_promise__WEBPACK_IMPORTED_MODULE_0__);\n// import mysql from 'mysql2/promise';\n// let connection;\n// const mysql = require('mysql2');\n// require('dotenv').config(); // Load environment variables\n// // Create a connection to the database\n// const connection = mysql.createConnection({\n//   host: process.env.DB_HOST,      // Use host from .env.local\n//   user: process.env.DB_USER,      // Use username from .env.local\n//   password: process.env.DB_PASSWORD, // Use blank password from .env.local\n//   database: process.env.DB_NAME    // Use database name from .env.local\n// });\n// // Connect to MySQL\n// connection.connect((err) => {\n//   if (err) {\n//     console.error('Error connecting: ' + err.stack);\n//     return;\n//   }\n//   console.log('Connected as id ' + connection.threadId);\n// });\n// module.exports = connection; // Export the connection for use in other files\n\nlet connection;\nasync function dbConnect() {\n    if (!connection) {\n        connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_0___default().createConnection({\n            host: process.env.MYSQL_HOST || \"localhost\",\n            user: process.env.MYSQL_USER || \"root\",\n            password: process.env.MYSQL_PASSWORD || \"\",\n            database: process.env.MYSQL_DATABASE || \"ram\",\n            waitForConnections: true,\n            connectionLimit: 10,\n            queueLimit: 0\n        });\n    }\n    return connection;\n} // import mysql from 'mysql2/promise';\n // async function dbConnect() {\n //   try {\n //     const connection = await mysql.createConnection({\n //       host: process.env.DB_HOST || 'localhost',\n //       user: process.env.DB_USER || 'root',\n //       password: process.env.DB_PASSWORD || '',\n //       database: process.env.DB_NAME || 'ram'\n //     });\n //     console.log('Database connected successfully!');\n //     return connection;\n //   } catch (error) {\n //     console.error('Database connection failed:', error);\n //     throw error; // Re-throw the error for further handling\n //   }\n // }\n // export default dbConnect; // Make sure this line is present\n // async function testConnection() {\n //   const db = await dbConnect();\n //   console.log('Database connected successfully!');\n //   await db.end();\n // }\n // testConnection().catch(console.error);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGJDb25uZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLHNDQUFzQztBQUV0QyxrQkFBa0I7QUFHbEIsbUNBQW1DO0FBQ25DLDREQUE0RDtBQUU1RCx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDLGdFQUFnRTtBQUNoRSxvRUFBb0U7QUFDcEUsNkVBQTZFO0FBQzdFLDBFQUEwRTtBQUMxRSxNQUFNO0FBRU4sc0JBQXNCO0FBQ3RCLGdDQUFnQztBQUNoQyxlQUFlO0FBQ2YsdURBQXVEO0FBQ3ZELGNBQWM7QUFDZCxNQUFNO0FBQ04sMkRBQTJEO0FBQzNELE1BQU07QUFFTiwrRUFBK0U7QUFFNUM7QUFFbkMsSUFBSUM7QUFFRyxlQUFlQztJQUNwQixJQUFJLENBQUNELFlBQVk7UUFDZkEsYUFBYSxNQUFNRCxzRUFBc0IsQ0FBQztZQUN4Q0ksTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVLElBQUk7WUFDaENDLE1BQU1ILFFBQVFDLEdBQUcsQ0FBQ0csVUFBVSxJQUFJO1lBQ2hDQyxVQUFVTCxRQUFRQyxHQUFHLENBQUNLLGNBQWMsSUFBSTtZQUN4Q0MsVUFBVVAsUUFBUUMsR0FBRyxDQUFDTyxjQUFjLElBQUk7WUFDeENDLG9CQUFvQjtZQUNwQkMsaUJBQWlCO1lBQ2pCQyxZQUFZO1FBQ2Q7SUFDRjtJQUNBLE9BQU9mO0FBQ1QsRUFNQSxzQ0FBc0M7Q0FFdEMsK0JBQStCO0NBQy9CLFVBQVU7Q0FDVix3REFBd0Q7Q0FDeEQsa0RBQWtEO0NBQ2xELDZDQUE2QztDQUM3QyxpREFBaUQ7Q0FDakQsK0NBQStDO0NBQy9DLFVBQVU7Q0FDVix1REFBdUQ7Q0FDdkQseUJBQXlCO0NBQ3pCLHNCQUFzQjtDQUN0QiwyREFBMkQ7Q0FDM0QsOERBQThEO0NBQzlELE1BQU07Q0FDTixJQUFJO0NBRUosOERBQThEO0NBUTlELG9DQUFvQztDQUNwQyxrQ0FBa0M7Q0FDbEMscURBQXFEO0NBQ3JELG9CQUFvQjtDQUNwQixJQUFJO0NBRUoseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9zcGl0YWwtbWFuYWdlbWVudC8uL2xpYi9kYkNvbm5lY3QuanM/MWQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcblxyXG5cclxuLy8gaW1wb3J0IG15c3FsIGZyb20gJ215c3FsMi9wcm9taXNlJztcclxuXHJcbi8vIGxldCBjb25uZWN0aW9uO1xyXG5cclxuXHJcbi8vIGNvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwyJyk7XHJcbi8vIHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpOyAvLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG5cclxuLy8gLy8gQ3JlYXRlIGEgY29ubmVjdGlvbiB0byB0aGUgZGF0YWJhc2VcclxuLy8gY29uc3QgY29ubmVjdGlvbiA9IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oe1xyXG4vLyAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QsICAgICAgLy8gVXNlIGhvc3QgZnJvbSAuZW52LmxvY2FsXHJcbi8vICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiwgICAgICAvLyBVc2UgdXNlcm5hbWUgZnJvbSAuZW52LmxvY2FsXHJcbi8vICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LkRCX1BBU1NXT1JELCAvLyBVc2UgYmxhbmsgcGFzc3dvcmQgZnJvbSAuZW52LmxvY2FsXHJcbi8vICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LkRCX05BTUUgICAgLy8gVXNlIGRhdGFiYXNlIG5hbWUgZnJvbSAuZW52LmxvY2FsXHJcbi8vIH0pO1xyXG5cclxuLy8gLy8gQ29ubmVjdCB0byBNeVNRTFxyXG4vLyBjb25uZWN0aW9uLmNvbm5lY3QoKGVycikgPT4ge1xyXG4vLyAgIGlmIChlcnIpIHtcclxuLy8gICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNvbm5lY3Rpbmc6ICcgKyBlcnIuc3RhY2spO1xyXG4vLyAgICAgcmV0dXJuO1xyXG4vLyAgIH1cclxuLy8gICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIGFzIGlkICcgKyBjb25uZWN0aW9uLnRocmVhZElkKTtcclxuLy8gfSk7XHJcblxyXG4vLyBtb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3Rpb247IC8vIEV4cG9ydCB0aGUgY29ubmVjdGlvbiBmb3IgdXNlIGluIG90aGVyIGZpbGVzXHJcblxyXG5pbXBvcnQgbXlzcWwgZnJvbSAnbXlzcWwyL3Byb21pc2UnO1xyXG5cclxubGV0IGNvbm5lY3Rpb247XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGJDb25uZWN0KCkge1xyXG4gIGlmICghY29ubmVjdGlvbikge1xyXG4gICAgY29ubmVjdGlvbiA9IGF3YWl0IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oe1xyXG4gICAgICBob3N0OiBwcm9jZXNzLmVudi5NWVNRTF9IT1NUIHx8ICdsb2NhbGhvc3QnLFxyXG4gICAgICB1c2VyOiBwcm9jZXNzLmVudi5NWVNRTF9VU0VSIHx8ICdyb290JyxcclxuICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52Lk1ZU1FMX1BBU1NXT1JEIHx8ICcnLFxyXG4gICAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuTVlTUUxfREFUQUJBU0UgfHwgJ3JhbScsXHJcbiAgICAgIHdhaXRGb3JDb25uZWN0aW9uczogdHJ1ZSxcclxuICAgICAgY29ubmVjdGlvbkxpbWl0OiAxMCxcclxuICAgICAgcXVldWVMaW1pdDogMCxcclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gY29ubmVjdGlvbjtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIGltcG9ydCBteXNxbCBmcm9tICdteXNxbDIvcHJvbWlzZSc7XHJcblxyXG4vLyBhc3luYyBmdW5jdGlvbiBkYkNvbm5lY3QoKSB7XHJcbi8vICAgdHJ5IHtcclxuLy8gICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHtcclxuLy8gICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuLy8gICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncm9vdCcsXHJcbi8vICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnJyxcclxuLy8gICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LkRCX05BTUUgfHwgJ3JhbSdcclxuLy8gICAgIH0pO1xyXG4vLyAgICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHkhJyk7XHJcbi8vICAgICByZXR1cm4gY29ubmVjdGlvbjtcclxuLy8gICB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xyXG4vLyAgICAgdGhyb3cgZXJyb3I7IC8vIFJlLXRocm93IHRoZSBlcnJvciBmb3IgZnVydGhlciBoYW5kbGluZ1xyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgZGJDb25uZWN0OyAvLyBNYWtlIHN1cmUgdGhpcyBsaW5lIGlzIHByZXNlbnRcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIHRlc3RDb25uZWN0aW9uKCkge1xyXG4vLyAgIGNvbnN0IGRiID0gYXdhaXQgZGJDb25uZWN0KCk7XHJcbi8vICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHkhJyk7XHJcbi8vICAgYXdhaXQgZGIuZW5kKCk7XHJcbi8vIH1cclxuXHJcbi8vIHRlc3RDb25uZWN0aW9uKCkuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiJdLCJuYW1lcyI6WyJteXNxbCIsImNvbm5lY3Rpb24iLCJkYkNvbm5lY3QiLCJjcmVhdGVDb25uZWN0aW9uIiwiaG9zdCIsInByb2Nlc3MiLCJlbnYiLCJNWVNRTF9IT1NUIiwidXNlciIsIk1ZU1FMX1VTRVIiLCJwYXNzd29yZCIsIk1ZU1FMX1BBU1NXT1JEIiwiZGF0YWJhc2UiLCJNWVNRTF9EQVRBQkFTRSIsIndhaXRGb3JDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25MaW1pdCIsInF1ZXVlTGltaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/dbConnect.js\n");

/***/ }),

/***/ "(api)/./pages/api/appointments.js":
/*!***********************************!*\
  !*** ./pages/api/appointments.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_dbConnect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/dbConnect */ \"(api)/./lib/dbConnect.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n// // /pages/api/appointments.js\n// import { dbConnect } from '../../lib/dbConnect';  // Assuming you already have dbConnect\n// // import jwt from 'jsonwebtoken';\n// export default async function handler(req, res) {\n//   if (req.method === 'POST') {\n//     const { doctor, date, time,userId} = req.body;\n//     try {\n//       // Connect to the database\n//       const connection = await dbConnect();\n//       // Insert the appointment into the database\n//       const [result] = await connection.execute(\n//         'INSERT INTO appointments (doctor, date, time,userId) VALUES (?, ?, ?,?)',\n//         [doctor, date, time,userId]\n//       );\n//       // Send a success response\n//       res.status(200).json({ message: 'Appointment booked successfully!' });\n//     } catch (error) {\n//       console.error(error);\n//       res.status(500).json({ message: 'Error booking appointment' });\n//     }\n//   } else {\n//     res.status(405).json({ message: 'Method not allowed' });\n//   }\n// }\n// pages/api/appointments.js\n// import { dbConnect } from '../../../lib/dbConnect';\n// import { dbConnect } from '../../lib/dbConnect';\n// import jwt from 'jsonwebtoken';\n// export default async function handler(req, res) {\n//   const connection = await dbConnect();\n//   if (req.method === 'POST') {\n//     const { doctor, date, time } = req.body;\n//     const token = req.headers.authorization?.split(' ')[1];\n//     if (!token) {\n//       return res.status(401).json({ message: 'Unauthorized' });\n//     }\n//     try {\n//       const decoded = jwt.verify(token, process.env.JWT_SECRET); // Replace with your JWT secret\n//       const userId = decoded.id;\n//       const [result] = await connection.execute(\n//         'INSERT INTO appointments (doctor, date, time, user_id) VALUES (?, ?, ?, ?)',\n//         [doctor, date, time, userId]\n//       );\n//       return res.status(201).json({ message: 'Appointment booked', appointmentId: result.insertId });\n//     } catch (error) {\n//       return res.status(500).json({ message: 'Failed to book appointment', error: error.message });\n//     }\n//   } else {\n//     res.setHeader('Allow', ['POST']);\n//     return res.status(405).end(`Method ${req.method} Not Allowed`);\n//   }\n// }\n// import { dbConnect } from '../../lib/dbConnect';\n// import jwt from 'jsonwebtoken';\n// export default async function handler(req, res) {\n//     if (req.method === 'POST') {\n//         const { doctor, date, time } = req.body;\n//         // Get the token from the headers\n//         const token = req.headers.authorization?.split(' ')[1];\n//         if (!token) {\n//             return res.status(401).json({ error: 'Unauthorized' });\n//         }\n//         try {\n//             // Verify the token to get the user's id\n//             const decoded = jwt.verify(token, process.env.JWT_SECRET);\n//             const userId = decoded.id;\n//             // Connect to the database\n//             await dbConnect();\n//             // Insert the new appointment along with the user_id\n//             const query = 'INSERT INTO appointments (doctor, date, time, user_id) VALUES (?, ?, ?, ?)';\n//             const values = [doctor, date, time, userId];  // Ensure you include the user_id\n//             // Execute the query using db.execute instead of db.query\n//             const [result] = await db.execute(query, values);\n//             if (result.affectedRows > 0) {\n//                 return res.status(201).json({ message: 'Appointment created successfully' });\n//             } else {\n//                 return res.status(500).json({ error: 'Failed to create appointment' });\n//             }\n//         } catch (error) {\n//             console.error('Database Error:', error);\n//             return res.status(500).json({ error: 'An error occurred while creating the appointment' });\n//         }\n//     }\n//     res.setHeader('Allow', ['POST']);\n//     res.status(405).end(`Method ${req.method} Not Allowed`);\n// }\n// import { dbConnect } from '../../lib/dbConnect';\n// export default async function handler(req, res) {\n//     const connection = await dbConnect(); // Connect to MySQL\n//     if (req.method === 'POST') {\n//         const { doctor, date, time, userId } = req.body; // Make sure to include userId for foreign key reference\n//         const query = 'INSERT INTO appointments (doctor, date, time, user_id) VALUES (?, ?, ?, ?)'; // Make sure user_id matches your DB structure\n//         const values = [doctor, date, time, userId]; // Include userId in your values array\n//         try {\n//             await connection.execute(query, values); // Execute the query\n//             res.status(201).json({ message: 'Appointment created successfully' });\n//         } catch (error) {\n//             console.error('Database error:', error); // Log the error for debugging\n//             res.status(500).json({ error: 'Database error' });\n//         } finally {\n//             await connection.end(); // Close the connection\n//         }\n//     } else {\n//         res.setHeader('Allow', ['POST']);\n//         res.status(405).end(`Method ${req.method} Not Allowed`);\n//     }\n// }\n// pages/api/appointments.js\n// import { dbConnect } from '../../lib/dbConnect';\n// import jwt from 'jsonwebtoken';\n// export default async function handler(req, res) {\n//   const connection = await dbConnect();\n//   if (req.method === 'GET') {\n//     const token = req.headers.authorization?.split(' ')[1];\n//     if (!token) {\n//       return res.status(401).json({ message: 'Unauthorized' });\n//     }\n//     try {\n//       const decoded = jwt.verify(token, process.env.JWT_SECRET);\n//       const userId = decoded.id;\n//       // Fetch the user email from the users table\n//       const [userRows] = await connection.execute('SELECT email FROM users WHERE id = ?', [userId]);\n//       const email = userRows[0]?.email;\n//       // Fetch appointments based on the user's email\n//       const [appointments] = await connection.execute('SELECT * FROM appointments WHERE user_email = ?', [email]);\n//       return res.status(200).json({ appointments });\n//     } catch (error) {\n//       return res.status(500).json({ message: 'Failed to fetch appointments', error: error.message });\n//     }\n//   } else {\n//     res.setHeader('Allow', ['GET']);\n//     return res.status(405).end(`Method ${req.method} Not Allowed`);\n//   }\n// }\n// /pages/api/appointments.js\n// import { db } from '../../lib/dbConnect';// Your database connection logic\n// export default async function handler(req, res) {\n//     if (req.method === 'POST') {\n//         const { doctor, date, time, user_id } = req.body;\n//         try {\n//             const result = await db.query(\n//                 'INSERT INTO appointments (doctor, date, time, user_id) VALUES (?, ?, ?, ?)', \n//                 [doctor, date, time, user_id]\n//             );\n//             res.status(200).json({ message: 'Appointment booked successfully!' });\n//         } catch (error) {\n//             res.status(500).json({ message: 'Appointment booking failed.' });\n//         }\n//     }\n// }\n// import { dbConnect } from '../../lib/dbConnect';  // Import the database connection\n// export default async function handler(req, res) {\n//     if (req.method === 'POST') {\n//         const { userId, appointmentDate, details } = req.body;\n//         try {\n//             // Connect to the database\n//             const connection = await dbConnect();\n//             // Insert the appointment into the database\n//             const query = 'INSERT INTO appointments (user_id, appointment_date, details) VALUES (?, ?, ?)';\n//             const values = [userId, appointmentDate, details];\n//             await connection.execute(query, values);\n//             res.status(200).json({ message: 'Appointment created successfully' });\n//         } catch (error) {\n//             console.error('Error creating appointment:', error);\n//             res.status(500).json({ message: 'Internal Server Error' });\n//         }\n//     } else {\n//         res.status(405).json({ message: 'Method Not Allowed' });\n//     }\n// }\n// import { dbConnect } from '../../lib/dbConnect';  // Import the database connection\n// export default async function handler(req, res) {\n//     if (req.method === 'POST') {\n//         const { userId, appointmentDate, details } = req.body;\n//         // Check if any of the required fields are missing\n//         if (!userId || !appointmentDate || !details) {\n//             return res.status(400).json({ message: 'Missing required fields' });\n//         }\n//         try {\n//             // Connect to the database\n//             const connection = await dbConnect();\n//             // Insert the appointment into the database\n//             const query = 'INSERT INTO appointments (doctor,appointment_date,time,) VALUES (?, ?, ?)';\n//             const values = [userId, appointmentDate, details];\n//             await connection.execute(query, values);\n//             res.status(200).json({ message: 'Appointment created successfully' });\n//         } catch (error) {\n//             console.error('Error creating appointment:', error);\n//             res.status(500).json({ message: 'Internal Server Error' });\n//         }\n//     } else {\n//         res.status(405).json({ message: 'Method Not Allowed' });\n//     }\n// }\n// import { dbConnect } from '../../lib/dbConnect'; // Import the database connection\n// export default async function handler(req, res) {\n//     if (req.method === 'POST') {\n//         const { userId, appointmentDate, time, doctor } = req.body;\n//         // Check if any of the required fields are missing\n//         if (!userId || !appointmentDate || !time || !doctor) {\n//             return res.status(400).json({ message: 'Missing required fields' });\n//         }\n//         try {\n//             // Connect to the database\n//             const connection = await dbConnect();\n//             // Insert the appointment into the database\n//             const query = 'INSERT INTO appointments (user_id, appointment_date, time, doctor) VALUES (?, ?, ?, ?)';\n//             const values = [userId, appointmentDate, time, doctor];\n//             const [result] = await connection.execute(query, values);\n//             res.status(200).json({\n//                 id: result.insertId,\n//                 user_id: userId,\n//                 appointment_date: appointmentDate,\n//                 time,\n//                 doctor,\n//                 message: 'Appointment created successfully'\n//             });\n//         } catch (error) {\n//             console.error('Error creating appointment:', error);\n//             res.status(500).json({ message: 'Internal Server Error' });\n//         }\n//     } else {\n//         res.status(405).json({ message: 'Method Not Allowed' });\n//     }\n// }\n// import { dbConnect } from '../../lib/dbConnect'; // Import the database connection\n// export default async function handler(req, res) {\n//     if (req.method === 'POST') {\n//         const { userId, appointmentDate, time, doctor } = req.body;\n//         // Check if any of the required fields are missing\n//         if (!userId || !appointmentDate || !time || !doctor) {\n//             return res.status(400).json({ message: 'Missing required fields' });\n//         }\n//         try {\n//             // Connect to the database\n//             const connection = await dbConnect();\n//             // Check if the user exists\n//             const checkUserQuery = 'SELECT * FROM users WHERE id = ?';\n//             const [user] = await connection.execute(checkUserQuery, [userId]);\n//             if (user.length === 0) {\n//                 return res.status(400).json({ message: 'User ID does not exist' });\n//             }\n//             // Insert the appointment into the database\n//             const query = 'INSERT INTO appointments (user_id, appointment_date, time, doctor) VALUES (?, ?, ?, ?)';\n//             const values = [userId, appointmentDate, time, doctor];\n//             const [result] = await connection.execute(query, values);\n//             res.status(200).json({\n//                 id: result.insertId,\n//                 user_id: userId,\n//                 appointment_date: appointmentDate,\n//                 time,\n//                 doctor,\n//                 message: 'Appointment created successfully'\n//             });\n//         } catch (error) {\n//             console.error('Error creating appointment:', error);\n//             res.status(500).json({ message: 'Internal Server Error' });\n//         }\n//     } else {\n//         res.status(405).json({ message: 'Method Not Allowed' });\n//     }\n// }\n\n\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        const authHeader = req.headers.authorization;\n        const token = authHeader?.split(\" \")[1];\n        if (!token) {\n            return res.status(401).json({\n                error: \"Unauthorized: Token missing\"\n            });\n        }\n        try {\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, process.env.JWT_SECRET);\n            const userId = decoded.id; // Assuming user ID is part of the token payload\n            const { appointment_date, time, doctor } = req.body; // Get data from request body\n            // Log data for debugging\n            console.log(\"Creating appointment:\", {\n                userId,\n                appointment_date,\n                time,\n                doctor\n            });\n            // Check for missing fields\n            if (!appointment_date || !time || !doctor) {\n                return res.status(400).json({\n                    error: \"Missing required fields: appointment_date, time, doctor\"\n                });\n            }\n            const connection = await (0,_lib_dbConnect__WEBPACK_IMPORTED_MODULE_0__.dbConnect)();\n            await connection.execute(\"INSERT INTO appointments (user_id, appointment_date, time, doctor) VALUES (?, ?, ?, ?)\", [\n                userId,\n                appointment_date,\n                time,\n                doctor\n            ]);\n            await connection.end();\n            res.status(201).json({\n                message: \"Appointment created successfully\"\n            });\n        } catch (error) {\n            console.error(\"Error creating appointment:\", error);\n            res.status(500).json({\n                error: \"Error creating appointment: \" + error.message\n            });\n        }\n    } else {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        return res.status(405).json({\n            error: `Method ${req.method} Not Allowed`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/appointments.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fappointments&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cappointments.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();